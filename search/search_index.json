{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"deepfake/experiment/main/","title":"\u5b9e\u9a8c","text":""},{"location":"deepfake/experiment/main/#sepmark","title":"SepMark","text":""},{"location":"deepfake/experiment/main/#_1","title":"\u5b9e\u9a8c\u200b\u76ee\u7684","text":"<p>\u200b\u672c\u6b21\u200b\u5b9e\u9a8c\u200b\u9700\u200b\u9a8c\u8bc1\u200b\u4e09\u70b9\u200b\uff1a</p> <ul> <li>\u200b\u53cc\u91cd\u200b\u6c34\u5370\u200b\u653b\u51fb\u200b\u662f\u200b\u6709\u6548\u200b\u7684\u200b\uff0c\u200b\u5373\u200b\u5bf9\u4e8e\u200b\u540c\u200b\u4e00\u5f20\u200b\u56fe\u7247\u200b\uff0c\u200b\u7b2c\u4e8c\u6b21\u200b\u7f16\u7801\u200b\u5c06\u200b\u4f7f\u5f97\u200b\u7b2c\u4e00\u6b21\u200b\u7f16\u7801\u200b\u7684\u200b\u4fe1\u606f\u200b\u6d88\u5931\u200b\uff1b</li> <li>\u200b\u63d0\u51fa\u200b Loss \u200b\u7ea6\u675f\u200b\u662f\u200b\u6709\u6548\u200b\u7684\u200b\uff0c\u200b\u5373\u200b\u80fd\u591f\u200b\u89e3\u51b3\u200b\u53cc\u91cd\u200b\u6c34\u5370\u200b\u653b\u51fb\u200b\uff1b</li> <li>\u200b\u90e8\u5206\u200b\u5fae\u8c03\u200b\u662f\u200b\u53ef\u884c\u200b\u7684\u200b\uff0c\u200b\u6216\u8005\u8bf4\u200b\u4ec5\u200b\u9488\u5bf9\u200b\u89e3\u7801\u5668\u200b\u5fae\u8c03\u200b\u3001\u200b\u800c\u200b\u4e0d\u200b\u8fdb\u884c\u200b\u5168\u91cf\u200b\u5fae\u8c03\u200b\u662f\u200b\u53ef\u884c\u200b\u7684\u200b\uff1b</li> </ul>"},{"location":"deepfake/experiment/main/#_2","title":"\u5b9e\u9a8c\u200b\u7ed3\u679c","text":"<ul> <li>\u200b\u65e0\u200b\u5fae\u8c03\u200b/\u200b\u5fae\u8c03\u200b\u5bf9\u6bd4\u200b\uff08Epoch 100\uff09</li> </ul> g_loss error_rate_C error_rate_R error_rate_F psnr ssim g_loss_on_discriminator g_loss_on_encoder_MSE g_loss_on_encoder_LPIPS g_loss_on_decoder_C g_loss_on_decoder_R g_loss_on_decoder_F d_loss g_loss_on_double_watermark double_error_rate_C double_error_rate_R double_error_rate_F \u200b\u672a\u200b\u5fae\u8c03\u200b 1.1644 0.00691318 0.000124139 0.478008 38.7788 0.938527 2.03329 0.000531517 0.00808962 0.000523669 0.000302436 1.08015e-06 2.00961 0.114804 0.498312 0.500698 0.487456 \u200b\u5fae\u8c03\u200b 0.0316224 0.00481385 6.89663e-05 0.485183 38.3354 0.929688 2.12371 0.000589209 0.00874837 0.000439849 0.000251798 5.70558e-07 1.95333 0.00159519 0.00129381 0 0.493148"},{"location":"deepfake/experiment/main/#_3","title":"\u5b9e\u9a8c\u200b\u8fc7\u7a0b","text":"<p>\u200b\u5728\u200b <code>network/Dual_Mark.py</code> \u200b\u7684\u200b\u7b2c\u200b 200 \u200b\u884c\u200b\u5de6\u53f3\u200b\uff0c\u200b\u6dfb\u52a0\u200b\u5982\u4e0b\u200b\u635f\u5931\u200b\u884c\u200b\uff1a</p> <pre><code># ======================= Double watermarking ====================== #\ndouble_message = torch.Tensor(np.random.choice([-1.0, 1.0], (images.shape[0], 128))).to('cuda')\ndouble_encoded_images, double_noised_images, double_decoded_messages_C, double_decoded_messages_R, double_decoded_messages_F = self.encoder_decoder(encoded_images, double_message, masks)\ng_loss_on_double_watermark = (\n    self.criterion_MSE(double_encoded_images, encoded_images) + \n    self.criterion_MSE(double_decoded_messages_C, decoded_messages_C)*5 + \n    self.criterion_MSE(double_decoded_messages_R, decoded_messages_R) + \n    self.criterion_MSE(double_decoded_messages_F, decoded_messages_F)\n</code></pre> <p>\u200b\u6dfb\u52a0\u200b Loss \u200b\u540e\u200b\uff0c\u200b\u4ece\u200b Epoch 91 \uff08\u200b\u5305\u542b\u200b Epoch 91\uff09\u200b\u8bad\u7ec3\u200b\u81f3\u200b Epoch 100\u3002\u200b\u5728\u200b\u6d4b\u8bd5\u200b\u96c6\u4e0a\u200b error_rate_C \u200b\u4f9d\u7136\u200b\u5728\u200b 50% \u200b\u9644\u8fd1\u200b\uff0c\u200b\u8fd9\u200b\u8bf4\u660e\u200b\u8be5\u200b Loss \u200b\u4f3c\u4e4e\u200b\u6ca1\u6709\u200b\u4f5c\u7528\u200b\uff08\u200b\u540e\u200b\u53d1\u73b0\u200b\u5b9e\u9645\u4e0a\u200b\u662f\u56e0\u4e3a\u200b\u6d4b\u8bd5\u4ee3\u7801\u200b\u6709\u200b\u95ee\u9898\u200b\uff0c\u200b\u4e14\u200b\u672a\u200b\u627e\u51fa\u200b\u6d4b\u8bd5\u4ee3\u7801\u200b\u51fa\u200b\u95ee\u9898\u200b\u7684\u200b\u539f\u56e0\u200b\u3002\u200b\u5b9e\u9645\u4e0a\u200b\uff0c\u200b\u4e0d\u7ba1\u200b\u662f\u4e0d\u662f\u200b\u7531\u4e8e\u200b\u6d4b\u8bd5\u4ee3\u7801\u200b\u6709\u200b\u95ee\u9898\u200b\uff0c\u200b\u8fd9\u91cc\u200b\u7684\u200b Loss \u200b\u8fd9\u4e48\u200b\u5199\u200b\u90fd\u200b\u662f\u200b\u4e0d\u200b\u5408\u9002\u200b\u7684\u200b\uff0c\u200b\u5e94\u5f53\u200b\u5148\u200b\u6309\u7167\u200b\u4e0b\u9762\u200b\u7684\u200b\u65b9\u5f0f\u200b\u91cd\u65b0\u200b\u5199\u200b Loss\uff09\u3002</p> <p>\u200b\u731c\u6d4b\u200b\u5931\u8d25\u200b\u539f\u56e0\u200b\uff1a\u200b\u7ea6\u675f\u200b\u7b2c\u4e00\u6b21\u200b\u89e3\u7801\u200b\u4fe1\u606f\u200b\u548c\u200b\u7b2c\u4e8c\u6b21\u200b\u89e3\u7801\u200b\u4fe1\u606f\u200b\u76f8\u540c\u200b\uff0c\u200b\u4f46\u200b\u7b2c\u4e00\u6b21\u200b\u89e3\u7801\u200b\u4fe1\u606f\u200b\u672c\u8eab\u200b\u53c8\u200b\u4e0d\u200b\u4e00\u5b9a\u200b\u51c6\u786e\u200b\u3002</p> <p>\u200b\u89e3\u51b3\u65b9\u6848\u200b\uff1a\u200b\u7ea6\u675f\u200b\u7b2c\u4e00\u6b21\u200b \u200b\u7f16\u7801\u200b \u200b\u4fe1\u606f\u200b\u548c\u200b\u7b2c\u4e8c\u6b21\u200b\u89e3\u7801\u200b\u4fe1\u606f\u200b\u76f8\u540c\u200b\uff0c\u200b\u540c\u65f6\u200b\u8d4b\u4e88\u200b\u6743\u91cd\u200b\u3002\u200b\u628a\u200b\u6dfb\u52a0\u200b\u7684\u200b Loss \u200b\u4fee\u6539\u200b\u4e3a\u200b\uff1a</p> <pre><code>double_message = torch.Tensor(np.random.choice([-1.0, 1.0], (images.shape[0], 128))).to('cuda')\ndouble_encoded_images, double_noised_images, double_decoded_messages_C, double_decoded_messages_R, double_decoded_messages_F = self.encoder_decoder(encoded_images, double_message, masks)\ng_loss_on_double_watermark = (\n    self.criterion_MSE(double_encoded_images, encoded_images) + \n    self.criterion_MSE(double_decoded_messages_C, messages)*5 + \n    self.criterion_MSE(double_decoded_messages_R, messages) + \n    self.criterion_MSE(double_decoded_messages_F, torch.zeros_like(messages))\n)\n</code></pre> <p>\u200b\u8bad\u7ec3\u200b\u7ed3\u675f\u200b\u540e\u200b\uff0c\u200b\u4fee\u6539\u200b <code>test_Dual_Mark.py</code> \u200b\u4ee3\u7801\u200b\uff0c\u200b\u4f7f\u200b\u5176\u200b\u7f16\u7801\u200b\u4e24\u6b21\u200b\u6c34\u5370\u200b\uff0c\u200b\u8fd0\u884c\u200b\u5f97\u5230\u200b\u7684\u200b error_rate_C \u200b\u4f9d\u7136\u200b\u5f88\u200b\u9ad8\u200b\uff0850% \u200b\u5de6\u53f3\u200b\u6d6e\u52a8\u200b\uff09\u3002\u200b\u4f46\u662f\u200b\u5982\u679c\u200b\u501f\u52a9\u200b\u6a21\u578b\u200b\u7684\u200b <code>validation()</code> \u200b\u51fd\u6570\u200b\u5728\u200b\u6d4b\u8bd5\u200b\u96c6\u4e0a\u200b\u8fd0\u884c\u200b\uff0c\u200b\u5219\u200b\u7ed3\u679c\u200b\u6b63\u5e38\u200b\uff1a</p> <pre><code>with tqdm(total=len(val_dataloader)) as pbar:\n    for step, (image, mask) in enumerate(val_dataloader, 1):\n        image = image.to(device)\n        message = torch.Tensor(np.random.choice([-message_range, message_range], (image.shape[0], message_length))).to(device)\n\n        result_origin, (images, encoded_images, noised_images) = network_origin.validation(image, message, mask)\n        result_double_watermark, (images, encoded_images, noised_images) = network_double_watermark.validation(image, message, mask)\n\n        for key in result_origin:\n            test_result_origin[key] += float(result_origin[key])\n            test_result_double_watermark[key] += float(result_double_watermark[key])\n\nfor key in result_origin:\n    test_result_origin[key] /= len(val_dataloader)\n    test_result_double_watermark[key] /= len(val_dataloader)\npd.DataFrame([test_result_origin, test_result_double_watermark], index=[0]).to_markdown(\"test_result.md\")\n</code></pre> <p>\u200b\u731c\u6d4b\u200b\u662f\u200b <code>test_Dual_Mark.py</code> \u200b\u4ee3\u7801\u200b\u7684\u200b\u95ee\u9898\u200b\uff0c\u200b\u6682\u200b\u672a\u627e\u5230\u200b\u539f\u56e0\u200b\u3002\u200b\u4e0d\u8fc7\u200b\u597d\u200b\u5728\u200b\u7ec8\u4e8e\u200b\u53ef\u4ee5\u200b\u5728\u200b\u6d4b\u8bd5\u200b\u96c6\u4e0a\u200b\u68c0\u9a8c\u200b\u5fae\u8c03\u200b\u6548\u679c\u200b\uff0c\u200b\u6682\u65f6\u200b</p>"},{"location":"ict/main/","title":"ICT \u200b\u5b9e\u9a8c\u200b\u7b14\u8bb0","text":""},{"location":"ict/main/#2024-mindspore","title":"2024 \u200b\u5e74\u56fd\u8d5b\u200b\u8bd5\u9898\u200b MindSpore \u200b\u90e8\u5206\u200b\u5185\u5bb9\u200b\u7814\u7a76","text":""},{"location":"ict/main/#_1","title":"\u4efb\u52a1\u200b\u4e00","text":"<p>\u200b\u4e3b\u8981\u200b\u76ee\u7684\u200b\u662f\u200b\u8bad\u7ec3\u200b\u4e00\u4e2a\u200b\u53ef\u4ee5\u200b\u8bc6\u522b\u200b\u5f00\u53d1\u677f\u200b\u4e0a\u200b\u80fd\u591f\u200b\u6807\u51fa\u200b\u84dd\u8272\u200b\u533a\u57df\u200b\u7684\u200b\u6a21\u578b\u200b\u3002</p> <p></p> <ul> <li>\u200b\u8003\u70b9\u200b\u4e00\u200b \u200b\u5b9e\u9a8c\u200b\u4e91\u200b\u73af\u5883\u200b\u51c6\u5907\u200b</li> </ul> <p>\u200b\u5373\u200b\u5728\u200b ModelArts \u200b\u7684\u200b Notebook \u200b\u4e0b\u200b\u8d2d\u4e70\u200b Notebook \u200b\u5b9e\u4f8b\u200b\uff0c\u200b\u6309\u7167\u200b\u5176\u200b\u8981\u6c42\u200b\u914d\u7f6e\u200b\u73af\u5883\u200b\u3002</p> <ul> <li>\u200b\u8003\u70b9\u200b\u4e8c\u200b \u200b\u586b\u5199\u200b\u6570\u636e\u200b\u9884\u5904\u7406\u200b\u90e8\u5206\u200b\u7684\u200b\u7f3a\u5931\u200b\u4ee3\u7801\u200b</li> </ul> <p>\u200b\u9884\u200b\u8bf4\u660e\u200b\u7684\u200b\u90e8\u5206\u200b</p> <p>\u200b\u5b9e\u9a8c\u200b\u6570\u636e\u200b\u96c6\u200b\u5206\u4e3a\u200b\u539f\u59cb\u6570\u636e\u200b\u96c6\u200b\u548c\u200b\u9884\u5904\u7406\u200b\u540e\u200b\u7684\u200b\u6570\u636e\u200b\u96c6\u200b</p> <ul> <li>\u200b\u539f\u59cb\u6570\u636e\u200b\u96c6\u200b\u4e3a\u200b raw data\uff0c\u200b\u5c5e\u4e8e\u200b coco \u200b\u683c\u5f0f\u200b\u6570\u636e\u200b\u96c6\u200b\uff0c\u200b\u5305\u542b\u200b\u56fe\u7247\u200b image \u200b\u4ee5\u53ca\u200b annotation \u200b\u6587\u4ef6\u200b\u3002\u200b\u539f\u59cb\u6570\u636e\u200b\u96c6\u200b\u4e0d\u80fd\u200b\u76f4\u63a5\u200b\u4f7f\u7528\u200b\uff0c\u200b\u9700\u8981\u200b\u7ecf\u8fc7\u200b\u6570\u636e\u200b\u9884\u5904\u7406\u200b\u3002</li> <li>\u200b\u9884\u5904\u7406\u200b\u540e\u200b\u7684\u200b\u6570\u636e\u200b\u96c6\u200b\u4e3a\u200b data\uff0c\u200b\u5b58\u653e\u200b\u9884\u5904\u7406\u200b\u540e\u200b\u7684\u200b\u6570\u636e\u200b\u96c6\u200b\uff0c\u200b\u5305\u542b\u200b\u56fe\u7247\u200b image \u200b\u548c\u200b\u6807\u7b7e\u200b mask\uff0c\u200b\u7528\u4e8e\u200b\u6a21\u578b\u200b\u8bad\u7ec3\u200b\u548c\u200b\u63a8\u7406\u200b\u3002</li> </ul> <p>raw_data \u200b\u7684\u200b\u76ee\u5f55\u200b\u7ed3\u6784\u200b\uff1a</p> <p></p> <p>\u200b\u9996\u5148\u200b\u662f\u200b\u586b\u5199\u200b <code>preprocess_dataset.py</code> \u200b\u7684\u200b\u4e09\u5904\u200b\u7a7a\u7f3a\u200b\u3002\u200b\u7b2c\u4e00\u5904\u200b\u7a7a\u7f3a\u200b\u5982\u4e0b\u200b\uff1a</p> <pre><code>#1\u3001\u200b\u586b\u5199\u200b\u53c2\u6570\u200b\u6807\u7b7e\u200b\n#------------------**************\nanno_json =   # annotaion json\u200b\u6587\u4ef6\u200b\u8def\u5f84\u200b\ncoco_cls =   # \u200b\u6570\u636e\u200b\u7c7b\u522b\u200b80+1\u200b\u7c7b\u200b\u7684\u200b\u540d\u5b57\u200b\ncoco_dir =   # \u200b\u6570\u636e\u200b\u96c6\u200b\u8def\u5f84\u200b\nsave_dir =   # \u200b\u6700\u7ec8\u200b\u7ed3\u679c\u200b\u4fdd\u5b58\u200b\u8def\u5f84\u200b    \n#--------------------***********************\n</code></pre> <pre><code>if __name__ == '__main__':\n    parser = argparse.ArgumentParser(description='Train the UNet on images and target masks',\n                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n    parser.add_argument('-d', '--data_url', dest='data_url', type=str, default='data/',\n                        help='save data directory')\n    args = parser.parse_args()\n    preprocess_dataset(cfg_unet, args.data_url)\n</code></pre> <p>\u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b\u7a0b\u5e8f\u200b\u9996\u5148\u200b\u6267\u884c\u200b\u5230\u200b <code>preprocess_dataset()</code> \u200b\u51fd\u6570\u200b\uff0c\u200b\u5982\u4e0b\u200b\uff1a</p> <pre><code>def preprocess_dataset(cfg, data_dir):\n    \"\"\"Select preprocess function.\"\"\"\n    if cfg['dataset'].lower() == \"cell_nuclei\":\n        preprocess_cell_nuclei_dataset({\"data_dir\": data_dir})\n    elif cfg['dataset'].lower() == \"coco\":\n        if 'split' in cfg and cfg['split'] == 1.0:\n            train_data_path = os.path.join(data_dir, \"train\")\n            val_data_path = os.path.join(data_dir, \"val\")\n            train_param_dict = {\"anno_json\": cfg[\"anno_json\"], \"coco_classes\": cfg[\"coco_classes\"],\n                                \"coco_dir\": cfg[\"coco_dir\"], \"save_dir\": train_data_path}\n            preprocess_coco_dataset(train_param_dict)\n            val_param_dict = {\"anno_json\": cfg[\"val_anno_json\"], \"coco_classes\": cfg[\"coco_classes\"],\n                              \"coco_dir\": cfg[\"val_coco_dir\"], \"save_dir\": val_data_path}\n            preprocess_coco_dataset(val_param_dict)\n        else:\n            param_dict = {\"anno_json\": cfg[\"anno_json\"], \"coco_classes\": cfg[\"coco_classes\"],\n                          \"coco_dir\": cfg[\"coco_dir\"], \"save_dir\": data_dir}\n            preprocess_coco_dataset(param_dict)\n    else:\n        raise ValueError(\"Not support dataset mode {}\".format(cfg['dataset']))\n    print(\"========== end preprocess dataset ==========\")\n</code></pre> <p>\u200b\u7531\u4e8e\u200b\u9898\u76ee\u200b\u8bf4\u200b\u6570\u636e\u200b\u96c6\u662f\u200b coco \u200b\u683c\u5f0f\u200b\uff0c\u200b\u6240\u4ee5\u200b\u7a0b\u5e8f\u200b\u4f1a\u200b\u6267\u884c\u200b <code>preprocess_coco_dataset()</code> \u200b\u4f1a\u200b\u5206\u522b\u200b\u4ee5\u200b train_param_dict\u3001val_param_dict\u3001param_dict \u200b\u4f5c\u4e3a\u200b\u53c2\u6570\u200b\u8c03\u7528\u200b\u3002</p> <p>\u200b\u7531\u6b64\u200b\u5df2\u7ecf\u200b\u53ef\u4ee5\u200b\u660e\u786e\u200b\u51fd\u6570\u200b <code>preprocess_coco_dataset()</code> \u200b\u7684\u200b\u53c2\u6570\u200b\u662f\u200b dict() \u200b\u7c7b\u578b\u200b\uff0c\u200b\u6240\u4ee5\u200b\u7b2c\u4e00\u4e2a\u200b\u7f3a\u5931\u200b\u7b54\u6848\u200b\u5982\u4e0b\u200b\uff1a</p> <pre><code>#1\u3001\u200b\u586b\u5199\u200b\u53c2\u6570\u200b\u6807\u7b7e\u200b\n#------------------**************\nanno_json = param_dict[\"anno_json\"]   # JSON\u200b\u683c\u5f0f\u200b\u6807\u6ce8\u200b\u6587\u4ef6\u200b\u8def\u5f84\u200b\ncoco_cls = param_dict[\"coco_classes\"] # \u200b\u6570\u636e\u200b\u7c7b\u522b\u200b80+1\u200b\u7c7b\u200b\u7684\u200b\u540d\u5b57\u200b\ncoco_dir = param_dict[\"coco_dir\"]     # \u200b\u6570\u636e\u200b\u96c6\u200b\u8def\u5f84\u200b\nsave_dir = param_dict[\"save_dir\"]     # \u200b\u6700\u7ec8\u200b\u7ed3\u679c\u200b\u4fdd\u5b58\u200b\u8def\u5f84\u200b\n#--------------------***********************\n</code></pre> <p>\u200b\u7b2c\u4e8c\u5904\u200b\u7a7a\u7f3a\u200b\u5982\u4e0b\u200b\uff1a</p> <pre><code>coco_cls_dict = {}  # key\u200b\u4e3a\u200b\u7c7b\u540d\u200b\uff0cvalue\u200b\u4e3a\u200b\u7d22\u5f15\u200b\u503c\u200b\nfor i, cls in enumerate(coco_cls):\n\n    # 2\u3001\u200b\u8865\u5168\u200b\u8be5\u5904\u200b\u4ee3\u7801\u200b\n    #------------------**************    \n    coco_cls_dict[xxx] =   # eg:{'backgroud':0, 'person':1',...}\n    #------------------**************\n</code></pre> <p>\u200b\u586b\u7a7a\u200b 1 \u200b\u5904\u200b\uff0c\u200b\u8bf4\u200b coco_cls \u200b\u662f\u200b \u200b\u6570\u636e\u200b\u7c7b\u522b\u200b80+1\u200b\u7c7b\u200b\u7684\u200b\u540d\u5b57\u200b\uff0c\u200b\u904d\u5386\u200b\u53d8\u91cf\u200b\u4e2d\u200b\uff0ci \u200b\u9010\u6e10\u200b\u9012\u589e\u200b\uff0ccls (class \u200b\u7684\u200b\u7f29\u5199\u200b) \u200b\u662f\u200b\u7c7b\u522b\u200b\u540d\u200b\u3002</p> <p>\u200b\u9700\u8981\u200b\u8865\u5168\u200b\u5904\u200b\u7684\u200b\u6ce8\u91ca\u200b\u53c8\u200b\u8bf4\u660e\u200b key-value \u200b\u4e2d\u200b\u7684\u200b key \u200b\u5e94\u8be5\u200b\u662f\u200b\u540d\u5b57\u200b\uff0c\u200b\u800c\u200b\u7b49\u4e8e\u200b\u7684\u200b\u503c\u200b\u53c8\u200b\u662f\u200b\u6570\u5b57\u200b\uff0c\u200b\u6240\u4ee5\u200b\u5e94\u8be5\u200b\u662f\u200b <code>coco_cls_dict[cls] = i</code>\u3002\u200b\u6240\u4ee5\u200b\u7b2c\u4e8c\u5904\u200b\u7f3a\u5931\u200b\u7b54\u6848\u200b\u5982\u4e0b\u200b\uff1a</p> <pre><code># 2\u3001\u200b\u8865\u5168\u200b\u8be5\u5904\u200b\u4ee3\u7801\u200b\n#------------------**************\ncoco_cls_dict[xxx] =   # eg:{'backgroud':0, 'person':1',...}\n#------------------**************\n</code></pre> <p>\u200b\u7b2c\u4e09\u200b\u5904\u200b\u7a7a\u7f3a\u200b\u5982\u4e0b\u200b\uff1a</p> <pre><code>#3\u3001\u200b\u8865\u5168\u200b\u8be5\u5904\u200b\u4ee3\u7801\u200b\n#------------------**************\nfor instance in anno:\n    m = annToMask(   )  # h*w\u200b\u7684\u200barray\n    c = coco_cls_dict[ ]  # \u200b\u6700\u91cc\u5c42\u200b\u4e3a\u6b64\u200b\u5206\u5272\u200b\u7269\u4f53\u200b\u5c5e\u4e8e\u200b\u54ea\u7c7b\u200b\u3002class_dict\u200b\u628a\u200bidx\u200b\u8f6c\u6210\u200b\u7c7b\u540d\u200b\uff0ccls_dict\u200b\u628a\u200b\u7c7b\u540d\u200b\u8f6c\u56de\u200bidx\n    if len(m.shape) &lt; 3:\n        mask[:, :] += () * ( * )  # \u200b\u5f53\u524d\u200b\u5c5e\u4e8e\u200b\u80cc\u666f\u200b\u7684\u200bmask=0\uff0c\u200b\u4e0e\u200b\u5f97\u5230\u200b\u7684\u200b\u7269\u4f53\u200b\u7684\u200b\u77e9\u9635\u200bm\uff0c\u200b\u5bf9\u5e94\u200b\u4f4d\u7f6e\u200b\u4e0a\u200b\u6807\u8bb0\u200b\u4e3a\u200b\u7c7b\u522b\u200bc\n    else:\n        mask[:, :] += () * (((  * c).astype(np.uint8)  # \u200b\u5c06\u200b3d\u200b\u8f6c\u200b\u6210\u200b2d,\u200b\u505a\u200b\u4e0a\u9762\u200b\u7c7b\u4f3c\u200b\u7684\u200b\u64cd\u4f5c\u200b\n#------------------**************\n</code></pre> <p>\u200b\u7b2c\u4e00\u4e2a\u200b\u51fd\u6570\u200b annToMask() \u200b\u610f\u601d\u200b\u5373\u5c06\u200b\u6807\u6ce8\u200b\u8f6c\u5316\u200b\u4e3a\u200b mask\uff0c\u200b\u51fd\u6570\u200b\u4f53\u200b\u5982\u4e0b\u200b\uff1a</p> <pre><code>def annToMask(ann, height, width):\n    \"\"\"Convert annotation to RLE and then to binary mask.\"\"\"\n    from pycocotools import mask as maskHelper\n    segm = ann['segmentation']  # \u200b\u524d\u666f\u200b\u8fb9\u754c\u70b9\u200b\uff0c\u200b\u5bf9\u5e94\u200bcoco rle\u200b\u683c\u5f0f\u200b\n    if isinstance(segm, list):\n        rles = maskHelper.frPyObjects(segm, height, width)\n        rle = maskHelper.merge(rles)\n    elif isinstance(segm['counts'], list):\n        rle = maskHelper.frPyObjects(segm, height, width)\n    else:\n        rle = ann['segmentation']\n    m = maskHelper.decode(rle)\n    return m\n</code></pre> <p>\u200b\u5373\u200b\u51fd\u6570\u200b annToMask() \u200b\u8f93\u5165\u200b\u6807\u6ce8\u200b ann\uff0cheight \u200b\u548c\u200b width\uff0c\u200b\u8f93\u51fa\u200b mask\u3002\u200b\u7531\u4e8e\u200b for \u200b\u5faa\u73af\u200b\u91cc\u200b\u904d\u5386\u200b\u53d8\u91cf\u200b\u4e3a\u200b instance\uff0c\u200b\u6240\u4ee5\u200b\u786e\u5b9a\u200b\u7b2c\u4e00\u4e2a\u200b\u53c2\u6570\u200b\u5e94\u8be5\u200b\u662f\u200b\u6807\u6ce8\u200b\uff0c\u200b\u5373\u200b instance\u3002\u200b\u540e\u9762\u200b\u7684\u200b\u9ad8\u200b\u548c\u200b\u5bbd\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b\u524d\u9762\u200b\u51e0\u884c\u200b\u6709\u200b\u53d8\u91cf\u200b h \u200b\u548c\u200b w \u200b\u7684\u200b\u8d4b\u503c\u200b\uff0c\u200b\u8fd9\u91cc\u200b\u9664\u4e86\u200b\u586b\u200b\u5b83\u200b\u4fe9\u200b\u4e5f\u200b\u6ca1\u4ec0\u4e48\u200b\u522b\u7684\u200b\u53ef\u586b\u200b\u7684\u200b\u4e86\u200b\uff0c\u200b\u56e0\u6b64\u200b\u7b2c\u200b 4 \u200b\u884c\u200b\u7b54\u6848\u200b\u662f\u200b <code>m = annToMask(instance, h, w)</code>\u3002</p> <p>\u200b\u7b2c\u200b 5 \u200b\u884c\u200b\u7ed9\u51fa\u200b\u7684\u200b\u63d0\u793a\u200b\u8bf4\u200b\uff1aclass_dict\u200b\u628a\u200bidx\u200b\u8f6c\u6210\u200b\u7c7b\u540d\u200b\uff0ccls_dict\u200b\u628a\u200b\u7c7b\u540d\u200b\u8f6c\u56de\u200bidx\u3002\u200b\u540c\u65f6\u200b\uff0c\u200b\u501f\u52a9\u200b\u4ee3\u7801\u200b\u8865\u5168\u200b\u63d2\u4ef6\u200b FittenCode\uff0c\u200b\u7ed9\u51fa\u200b\u7684\u200b\u63d0\u793a\u200b\u4e3a\u200b <code>classs_dict[instance[\"category_id\"]]</code>\u3002\u200b\u731c\u6d4b\u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u77e5\u9053\u200b instance \u200b\u5bf9\u5e94\u200b json \u200b\u6587\u4ef6\u200b\u7684\u200b\u952e\u503c\u200b\uff0c\u200b\u6253\u5f00\u200b <code>raw_data/annotations/instances_annotations.json</code>\uff0c\u200b\u5982\u4e0b\u200b\uff1a</p> <p></p> <p>\u200b\u8fd9\u200b\u8bf4\u660e\u200b AI \u200b\u7ed9\u51fa\u200b\u7684\u200b\u63d0\u793a\u200b\u51c6\u786e\u65e0\u8bef\u200b\uff0c\u200b\u5373\u200b\u7b2c\u200b 5 \u200b\u884c\u200b\u7b54\u6848\u200b\u4e3a\u200b\uff1a<code>c = coco_cls_dict[instance[\"category_id\"]]</code>\u3002\u200b\u5269\u4e0b\u200b\u7684\u200b\u7a7a\u7f3a\u200b\u8f83\u96be\u200b\uff0c\u200b\u5047\u8bbe\u200b\u6bd4\u8d5b\u200b\u65f6\u200b\u6ca1\u6709\u200b coco \u200b\u6570\u636e\u200b\u96c6\u200b\u5904\u7406\u200b\u76f8\u5173\u200b\u7684\u200b\u77e5\u8bc6\u200b\uff0c\u200b\u611f\u89c9\u200b\u6839\u672c\u65e0\u6cd5\u200b\u505a\u200b\u51fa\u6765\u200b\u3002\u200b\u81f3\u4e8e\u200b <code>src/config.py</code> \u200b\u4e0b\u200b\u7684\u200b\u53c2\u6570\u200b\uff0c\u200b\u7b54\u6848\u200b\u57fa\u672c\u200b\u662f\u200b\u6309\u7167\u200b <code>train.py</code> \u200b\u4e2d\u200b\u7684\u200b\u9ed8\u8ba4\u503c\u200b\u6765\u200b\u586b\u200b\u7684\u200b\uff0c\u200b\u8fd9\u200b\u5c31\u200b\u5f88\u200b\u5947\u602a\u200b...\u200b\u5982\u679c\u200b\u4f60\u200b\u662f\u200b\u9ed8\u8ba4\u503c\u200b\u7684\u8bdd\u200b\uff0c\u200b\u90a3\u200b\u4e3a\u4ec0\u4e48\u200b\u8fd8\u8981\u200b\u5728\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u91cc\u200b\u58f0\u660e\u200b\u4e00\u4e0b\u200b\uff1f</p> <ul> <li>\u200b\u8003\u70b9\u200b 3\uff1a\u200b\u5b8c\u6210\u200b <code>unet</code> \u200b\u7f51\u7edc\u200b\u6a21\u578b\u200b\u6316\u7a7a\u200b\u90e8\u5206\u200b\uff0c\u200b\u8bad\u7ec3\u200b\u5e76\u200b\u4fdd\u5b58\u200b\u6743\u91cd\u200b\uff0c\u200b\u4ee5\u200b\u751f\u6210\u200b\u6743\u91cd\u200b\u6587\u4ef6\u200b\u4e3a\u51c6\u200b</li> </ul> <p>\u200b\u7b2c\u4e00\u5904\u200b\u7a7a\u7f3a\u200b\uff0c\u200b\u7531\u4e8e\u200b\u53ea\u200b\u9700\u8981\u200b\u533a\u5206\u200b\u662f\u200b\u84dd\u8272\u200b\u533a\u57df\u200b\uff0c\u200b\u56e0\u6b64\u200b\u5206\u7c7b\u200b\u7c7b\u522b\u200b\u4e3a\u200b 2\uff0c\u200b\u8fd9\u200b\u4e0e\u200b\u524d\u9762\u200b\u7684\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u4e2d\u200b\u7684\u200b\u586b\u5199\u200b\u4e00\u81f4\u200b\u3002</p> <pre><code>def __init__(self, in_channel, n_class=2, feature_scale=2, use_deconv=True, use_bn=True):\n</code></pre> <p>\u200b\u7b2c\u4e8c\u5904\u200b\u7a7a\u7f3a\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u53c2\u7167\u200b\u4e0a\u65b9\u200b\u51fd\u6570\u200b <code>NestedUNet</code> \u200b\u5982\u4f55\u200b\u5bf9\u200b\u901a\u9053\u200b\u6570\u200b\u8fdb\u884c\u200b\u7f29\u653e\u200b\u3002\u200b\u8fd9\u200b\u6bb5\u200b\u4ee3\u7801\u200b\u662f\u200b\u4e3a\u4e86\u200b\u65b9\u4fbf\u200b\u4fee\u6539\u200b\u8f93\u5165\u200b\u3001\u200b\u8f93\u51fa\u200b\u901a\u9053\u200b\u6570\u800c\u200b\u8bbe\u7f6e\u200b\u7684\u200b\uff0cfeature.scale \u200b\u7c7b\u4f3c\u200b\u4e8e\u200b\u8fd9\u91cc\u200b <code>ResidualBlockBase</code> \u200b\u7684\u200b <code>expansion</code> \uff0c\u200b\u56e0\u6b64\u200b\u8be5\u200b\u7a7a\u7f3a\u200b\u586b\u5199\u200b\u5982\u4e0b\u200b\uff1a</p> <pre><code>filters = [int(x / self.feature_scale) for x in filters]\n</code></pre> <p>\u200b\u7b2c\u4e09\u200b\u5904\u200b\u7a7a\u7f3a\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u53c2\u7167\u200b\u4e0a\u65b9\u200b\u51fd\u6570\u200b <code>NestedUNet</code> \u200b\u5982\u4f55\u200b\u5b9a\u4e49\u200b\u6c60\u5316\u5c42\u200b\uff0c\u200b\u518d\u200b\u7ed3\u5408\u200b\u7ed9\u51fa\u200b\u7684\u200b\u6a21\u578b\u200b\u56fe\u7247\u200b\u786e\u5b9a\u200b\u5377\u79ef\u200b\u7a97\u53e3\u200b\u5c3a\u5bf8\u200b\u548c\u200b\u6b65\u957f\u200b\u3002\u200b\u56e0\u6b64\u200b\uff0c\u200b\u8be5\u5904\u200b\u7a7a\u7f3a\u200b\u586b\u5199\u200b\u5982\u4e0b\u200b\uff1a</p> <pre><code>self.maxpool = nn.MaxPool2d(kernel_size=2, stride=2, pad_mode=\"same\")\n</code></pre> <p>\u200b\u7b2c\u56db\u200b\u5904\u200b\u7a7a\u7f3a\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u53c2\u7167\u200b\u4e0a\u65b9\u200b\u51fd\u6570\u200b <code>NestedUNet</code> \u200b\u5982\u4f55\u200b\u5b9a\u4e49\u200b\u4e0b\u200b\u91c7\u6837\u200b\u5c42\u200b\uff1a</p> <pre><code>self.conv00 = UnetConv2d(self.in_channel, filters[0], self.use_bn)\nself.conv10 = UnetConv2d(filters[0], filters[1], self.use_bn)\nself.conv20 = UnetConv2d(filters[1], filters[2], self.use_bn)\nself.conv30 = UnetConv2d(filters[2], filters[3], self.use_bn)\nself.conv40 = UnetConv2d(filters[3], filters[4], self.use_bn)\n</code></pre> <p>\u200b\u56e0\u6b64\u200b\uff0c\u200b\u4eff\u7167\u200b\u4e0a\u8ff0\u200b\u4ee3\u7801\u200b\uff0c\u200b\u7b2c\u56db\u200b\u5904\u200b\u7a7a\u7f3a\u200b\u586b\u5199\u200b\u5982\u4e0b\u200b\uff1a</p> <pre><code>self.conv1 = UnetConv2d(filters[0], filters[1], self.use_bn)\nself.conv2 = UnetConv2d(filters[1], filters[2], self.use_bn)\nself.conv3 = UnetConv2d(filters[2], filters[3], self.use_bn)\nself.conv4 = UnetConv2d(filters[3], filters[4], self.use_bn)\n</code></pre> <p>\u200b\u7b2c\u4e94\u200b\u5904\u200b\u7a7a\u7f3a\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u53c2\u7167\u200b\u4e0a\u65b9\u200b\u51fd\u6570\u200b <code>NestedUNet</code> \u200b\u5982\u4f55\u200b\u5b9a\u4e49\u200b\u4e0a\u200b\u91c7\u6837\u200b\u5c42\u200b\uff1a</p> <pre><code>self.up_concat01 = UnetUp(filters[1], filters[0], self.use_deconv, 2)\nself.up_concat11 = UnetUp(filters[2], filters[1], self.use_deconv, 2)\nself.up_concat21 = UnetUp(filters[3], filters[2], self.use_deconv, 2)\nself.up_concat31 = UnetUp(filters[4], filters[3], self.use_deconv, 2)\n\nself.up_concat02 = UnetUp(filters[1], filters[0], self.use_deconv, 3)\nself.up_concat12 = UnetUp(filters[2], filters[1], self.use_deconv, 3)\nself.up_concat22 = UnetUp(filters[3], filters[2], self.use_deconv, 3)\n\nself.up_concat03 = UnetUp(filters[1], filters[0], self.use_deconv, 4)\nself.up_concat13 = UnetUp(filters[2], filters[1], self.use_deconv, 4)\n\nself.up_concat04 = UnetUp(filters[1], filters[0], self.use_deconv, 5)\n</code></pre> <p>\u200b\u56e0\u6b64\u200b\uff0c\u200b\u4eff\u7167\u200b\u4e0a\u8ff0\u200b\u4ee3\u7801\u200b\uff0c\u200b\u7b2c\u4e94\u200b\u5904\u200b\u7a7a\u7f3a\u200b\u586b\u5199\u200b\u5982\u4e0b\u200b\uff1a</p> <pre><code>self.up_concat2 = UnetUp(filters[2], filters[1], self.use_deconv, 2)\nself.up_concat3 = UnetUp(filters[3], filters[2], self.use_deconv, 2)\nself.up_concat4 = UnetUp(filters[4], filters[3], self.use_deconv, 2)\n</code></pre> <p>\u200b\u8fd9\u91cc\u200b\u4e3a\u4ec0\u4e48\u200b\u53ea\u5230\u200b 4\uff1f\u200b\u56e0\u4e3a\u200b\u5728\u200b\u4e0b\u65b9\u200b\u7684\u200b <code>contruct()</code> \u200b\u51fd\u6570\u200b\u4e2d\u200b\uff0c\u200b\u662f\u200b\u5148\u200b\u4ece\u200b up4 \u200b\u5f00\u59cb\u200b\u7684\u200b\u3002</p> <p>\u200b\u7b2c\u516d\u200b\u5904\u200b\u7a7a\u7f3a\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u53c2\u7167\u200b\u4e0a\u65b9\u200b\u51fd\u6570\u200b <code>NestedUNet</code> \u200b\u5982\u4f55\u200b\u5b9a\u4e49\u200b <code>contrusct()</code> \u200b\u51fd\u6570\u200b\uff1a</p> <pre><code>x00 = self.conv00(inputs)                   # channel = filters[0]\nx10 = self.conv10(self.maxpool(x00))        # channel = filters[1]\nx20 = self.conv20(self.maxpool(x10))        # channel = filters[2]\nx30 = self.conv30(self.maxpool(x20))        # channel = filters[3]\nx40 = self.conv40(self.maxpool(x30))        # channel = filters[4]\n\nx01 = self.up_concat01(x10, x00)            # channel = filters[0]\nx11 = self.up_concat11(x20, x10)            # channel = filters[1]\nx21 = self.up_concat21(x30, x20)            # channel = filters[2]\nx31 = self.up_concat31(x40, x30)            # channel = filters[3]\n\nx02 = self.up_concat02(x11, x00, x01)       # channel = filters[0]\nx12 = self.up_concat12(x21, x10, x11)       # channel = filters[1]\nx22 = self.up_concat22(x31, x20, x21)       # channel = filters[2]\n\nx03 = self.up_concat03(x12, x00, x01, x02)  # channel = filters[0]\nx13 = self.up_concat13(x22, x10, x11, x12)  # channel = filters[1]\n\nx04 = self.up_concat04(x13, x00, x01, x02, x03) # channel = filters[0]\n\nfinal1 = self.final1(x01)\nfinal2 = self.final2(x02)\nfinal3 = self.final3(x03)\nfinal4 = self.final4(x04)\n</code></pre> <p>\u200b\u56e0\u6b64\u200b\uff0c\u200b\u4eff\u7167\u200b\u4e0a\u8ff0\u200b\u4ee3\u7801\u200b\uff0c\u200b\u7b2c\u516d\u200b\u5904\u200b\u7a7a\u7f3a\u200b\u586b\u5199\u200b\u5982\u4e0b\u200b\uff1a</p> <pre><code>#/5\u3001\u200b\u8bf7\u200b\u8865\u5145\u200b\u586b\u5199\u200b\u4e0b\u9762\u200b\u4ee3\u7801\u200b\u4e2d\u200b\u7f3a\u5931\u200b\u7684\u200b\u90e8\u5206\u200b\uff0c\u200b\u5c06\u200b\u4e0a\u8ff0\u200b\u7b97\u5b50\u200b\u7ec4\u5408\u6210\u200b\u81ea\u5b9a\u4e49\u200b\u7684\u200bunet\u200b\u7f51\u7edc\u200b\uff08down sample\u200b\u90e8\u5206\u200b\uff09\n##-------------********------------\nx0 = self.conv0(inputs) # \u200b\u7b2c\u4e00\u4e2a\u200b\u5377\u79ef\u200b\u6a21\u5757\u200b\uff0c\u200b\u8f93\u5165\u200b\u4e3a\u200b\u539f\u59cb\u200b\u56fe\u50cf\u200binputs\uff0c\u200b\u8f93\u51fa\u200b\u4e3a\u200b\u7279\u5f81\u200b\u56fe\u200bx0\nx1 = self.conv1(self.maxpool(x0)) # \u200b\u7b2c\u4e8c\u4e2a\u200b\u5377\u79ef\u200b\u6a21\u5757\u200b\uff0c\u200b\u7279\u5f81\u200b\u56fe\u200bx0\u200b\u9700\u200b\u7ecf\u8fc7\u200b\u6700\u5927\u200b\u6c60\u5316\u200b\u548c\u200b\u5377\u79ef\u200b\u8fd0\u7b97\u200b\u5f97\u5230\u200bx1\nx2 = self.conv2(self.maxpool(x1)) # \u200b\u7b2c\u4e09\u4e2a\u200b\u5377\u79ef\u200b\u6a21\u5757\u200b\uff0c\u200b\u7279\u5f81\u200b\u56fe\u200bx1\u200b\u9700\u200b\u7ecf\u8fc7\u200b\u6700\u5927\u200b\u6c60\u5316\u200b\u548c\u200b\u5377\u79ef\u200b\u8fd0\u7b97\u200b\u5f97\u5230\u200bx2\nx3 = self.conv3(self.maxpool(x2)) # \u200b\u7b2c\u56db\u4e2a\u200b\u5377\u79ef\u200b\u6a21\u5757\u200b\uff0c\u200b\u7279\u5f81\u200b\u56fe\u200bx2\u200b\u9700\u200b\u7ecf\u8fc7\u200b\u6700\u5927\u200b\u6c60\u5316\u200b\u548c\u200b\u5377\u79ef\u200b\u8fd0\u7b97\u200b\u5f97\u5230\u200bx3\nx4 = self.conv4(self.maxpool(x3)) # \u200b\u7b2c\u4e94\u4e2a\u200b\u5377\u79ef\u200b\u6a21\u5757\u200b\uff0c\u200b\u7279\u5f81\u200b\u56fe\u200bx3\u200b\u9700\u200b\u7ecf\u8fc7\u200b\u6700\u5927\u200b\u6c60\u5316\u200b\u548c\u200b\u5377\u79ef\u200b\u8fd0\u7b97\u200b\u5f97\u5230\u200bx4\n##-------------********------------\n</code></pre> <p>\u200b\u63a5\u4e0b\u6765\u200b\u8865\u5145\u200b <code>train.py</code> \u200b\u7684\u200b\u4ee3\u7801\u200b\uff0c\u200b\u8fd9\u90e8\u5206\u200b\u5c5e\u4e8e\u200b\u57fa\u672c\u529f\u200b\u4e86\u200b\uff0c\u200b\u7b2c\u4e00\u5904\u200b\u7a7a\u7f3a\u200b\u5f88\u200b\u7b80\u5355\u200b\uff1a</p> <pre><code>context.set_context(mode=context.PYNATIVE_MODE, device_target=\"Ascend\", device_id=device_id)\n</code></pre> <p>\u200b\u8fd9\u91cc\u200b\u81f3\u5c11\u200b\u662f\u200b\u53ef\u4ee5\u200b\u5199\u51fa\u200b context.PYNATIVE_MODE \u200b\u7684\u200b\uff0c\u200b\u7136\u540e\u200b\u8865\u5168\u200b\u5de5\u5177\u200b\u4f1a\u200b\u56e0\u4e3a\u200b\u4e0a\u9762\u200b\u8bbe\u7f6e\u200b\u4e86\u200b device\uff0c\u200b\u81ea\u52a8\u200b\u8865\u5168\u200b\u51fa\u200b device_id\u3002\u200b\u81f3\u4e8e\u200b device \u200b\u5219\u200b\u4e0d\u200b\u751a\u200b\u5f71\u54cd\u200b\u6b64\u6b21\u200b\u5b9e\u9a8c\u200b\u8fd0\u884c\u200b\uff0c\u200b\u5c5e\u4e8e\u200b\u65e0\u6240\u8c13\u200b\u7684\u200b\u53c2\u6570\u200b\u3002</p> <p>\u200b\u63a5\u4e0b\u6765\u200b\u5b9a\u4e49\u200b\u4f18\u5316\u200b\u5668\u200b\uff0c\u200b\u4e0a\u65b9\u200b\u5df2\u7ecf\u200b\u6307\u660e\u200b\u8981\u200b\u4f7f\u7528\u200b Adam \u200b\u4f18\u5316\u200b\u5668\u200b\uff0c\u200b\u4e5f\u200b\u5c5e\u4e8e\u200b\u57fa\u7840\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u591a\u200b\u6572\u200b\u8fc7\u200b\u51e0\u4e2a\u200b\u7f51\u7edc\u200b\u80af\u5b9a\u200b\u662f\u200b\u4f1a\u200b\u7684\u200b\uff1a</p> <pre><code>optimizer = nn.Adam(params=net.trainable_params(), learning_rate=lr, weight_decay=cfg['weight_decay'], loss_scale=cfg['loss_scale'])\n</code></pre> <p>\u200b\u63a5\u4e0b\u6765\u200b\u8865\u5168\u200b\u904d\u5386\u200b\u7684\u200b for \u200b\u51fd\u6570\u200b\u3002\u200b\u7531\u4e8e\u200b\u662f\u4ece\u200b 0 \u200b\u5f00\u59cb\u200b\u53d6\u503c\u200b\u7684\u200b\uff0c\u200b\u6253\u5370\u200b\u7684\u200b\u65f6\u5019\u200b\u5e94\u8be5\u200b\u8bbe\u7f6e\u200b t+1\uff1btrain_loop \u200b\u6709\u200b\u4e09\u4e2a\u200b\u53c2\u6570\u200b\uff0c\u200b\u5206\u522b\u200b\u662f\u200b model\u3001dataset\u3001loss_f\u3001optimizer\uff0c\u200b\u7531\u4e8e\u200b\u5176\u5747\u200b\u5df2\u7ecf\u200b\u5728\u200b\u4ee3\u7801\u200b\u4e2d\u200b\u5b9a\u4e49\u200b\uff0c\u200b\u76f4\u63a5\u200b\u4f7f\u7528\u200b\u8865\u5168\u200b\u63d2\u4ef6\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u5f97\u5230\u200b\u7b54\u6848\u200b\uff1btest_loop \u200b\u4e5f\u200b\u7c7b\u4f3c\u200b\uff0c\u200b\u53ea\u4e0d\u8fc7\u200b\u6ca1\u6709\u200b optimizer \u200b\u53c2\u6570\u200b\u3002</p> <pre><code>for t in range(int(epochs / repeat)):\n    print(f\"Epoch {t+1}\\n-------------------------------\")\n    train_loop(model=net, dataset=train_dataset, loss_fn=criterion, optimizer=optimizer)\n    test_loop(model=net, dataset=valid_dataset, loss_fn=criterion)\nprint(\"Done!\")\n</code></pre> <p>\u200b\u63a5\u4e0b\u6765\u200b\u7684\u200b\u7a7a\u200b\u66f4\u200b\u7b80\u5355\u200b\uff0c\u200b\u65e0\u9700\u200b\u8d58\u8ff0\u200b\uff1a</p> <pre><code>mindspore.save_checkpoint(net, 'best.ckpt')\n</code></pre> <p>\u200b\u4e0b\u9762\u200b\u7684\u200b\u7a7a\u200b\u548c\u200b\u5b9a\u4e49\u200b optimizer \u200b\u7c7b\u4f3c\u200b\uff0c\u200b\u4e5f\u200b\u662f\u200b\u5c5e\u4e8e\u200b\u6bcf\u6b21\u200b\u5fc5\u200b\u5b9a\u4e49\u200b\u7684\u200b\uff0c\u200b\u591a\u200b\u6572\u200b\u51e0\u4e2a\u200b\u7f51\u7edc\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u8bb0\u4f4f\u200b\uff1a</p> <pre><code>grad_fn = ops.value_and_grad(forward_fn, None, has_aux=True)\n</code></pre> <p>\u200b\u540c\u200b\u4e0a\u200b\uff0c\u200b\u5fc5\u200b\u5b9a\u4e49\u200b\u7684\u200b\uff1a</p> <pre><code>def train_step(data, label):\n    (loss, _), grads = grad_fn(data, label)\n    loss = optimizer(data, optimizer(data))\n    return loss\n</code></pre> <p>\u200b\u6700\u540e\u200b\u4e00\u5904\u200b\u8865\u5168\u200b\uff0c\u200b\u8fd9\u662f\u200b\u4e00\u4e2a\u200b test \u200b\u51fd\u6570\u200b\u3002\u200b\u8fd9\u4e2a\u200b\u51fd\u6570\u200b\u662f\u5426\u200b\u8865\u5168\u200b\u5e76\u200b\u4e0d\u200b\u5f71\u54cd\u200b\u8bad\u7ec3\u200b\uff0c\u200b\u5982\u679c\u200b\u5b9e\u5728\u200b\u65e0\u6cd5\u200b\u8865\u5168\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u76f4\u63a5\u200b\u5728\u200b\u9876\u90e8\u200b return\u3002\u200b\u8fd9\u91cc\u200b\u4e5f\u200b\u662f\u200b\u9700\u8981\u200b\u591a\u200b\u6572\u200b\u51e0\u904d\u200b\u7f51\u7edc\u200b\u624d\u80fd\u200b\u77e5\u9053\u200b\uff0c\u200b\u518d\u200b\u52a0\u4e0a\u200b\u8865\u5168\u200b\u63d0\u793a\u200b\uff0c\u200b\u5c31\u200b\u6bd4\u8f83\u200b\u5bb9\u6613\u200b\u5199\u200b\u51fa\u6765\u200b\uff1a</p> <pre><code>num_batches = dataset.get_dataset_size()\nmodel.set_train(False)\ntest_loss = 0\nfor data, label in dataset.create_tuple_iterator():\n    pred = model(data)        \n    test_loss += loss_fn(pred, label).asnumpy()\n\ntest_loss /= num_batches\n\nprint(f\"Test: \\n Avg loss: {test_loss:&gt;8f} \\n\")\n</code></pre>"},{"location":"ict/main/#_2","title":"\u5b9e\u8df5\u200b\u6848\u4f8b","text":""},{"location":"ict/main/#_3","title":"\u8ba1\u7b97\u673a\u200b\u89c6\u89c9","text":""},{"location":"ict/main/#resnet-50","title":"ResNet 50 \u200b\u56fe\u50cf\u200b\u5206\u7c7b","text":"<p>ReNet \u200b\u4e3b\u8981\u200b\u89e3\u51b3\u200b\u7684\u200b\u95ee\u9898\u200b\uff1a\u200b\u51cf\u8f7b\u200b\u7f51\u7edc\u5c42\u200b\u6570\u200b\u589e\u52a0\u200b\u65f6\u200b\uff0c\u200b\u6a21\u578b\u200b\u7684\u200b\u9000\u5316\u200b\u95ee\u9898\u200b\u3002\u200b\u5927\u81f4\u200b\u7ed3\u6784\u200b\u5982\u4e0b\u200b\uff1a</p> <p></p> <p>ResNet \u200b\u6709\u200b\u4e24\u79cd\u200b\u7f51\u7edc\u7ed3\u6784\u200b\uff0c\u200b\u4e00\u79cd\u200b\u662f\u200b Building Block\uff0c\u200b\u4e00\u79cd\u200b\u662f\u200b Bottleneck Block\u3002Building Block \u200b\u5927\u81f4\u200b\u7ed3\u6784\u200b\u5982\u4e0b\u200b\uff1a</p> <p></p> <p>Bottleneck Block \u200b\u5927\u81f4\u200b\u7ed3\u6784\u200b\u5982\u4e0b\u200b\uff1a</p> <p></p>"},{"location":"ict/main/#vision-transformer","title":"Vision Transformer","text":"<p>Transformer \u200b\u662f\u200b\u81ea\u7136\u8bed\u8a00\u200b\u5904\u7406\u200b\u6a21\u578b\u200b\u7684\u200b\u53d1\u5c55\u200b\u7ed3\u6676\u200b\uff0cViT \u200b\u5219\u200b\u662f\u200b\u81ea\u7136\u8bed\u8a00\u200b\u5904\u7406\u200b\u548c\u200b\u8ba1\u7b97\u673a\u200b\u89c6\u89c9\u200b\u4e24\u4e2a\u200b\u9886\u57df\u200b\u7684\u200b\u7ed3\u6676\u200b\u3002\u200b\u5728\u200b\u4e0d\u200b\u4f9d\u8d56\u200b\u5377\u79ef\u200b\u64cd\u4f5c\u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u4ecd\u80fd\u200b\u8fbe\u5230\u200b\u8f83\u200b\u597d\u200b\u7684\u200b\u6548\u679c\u200b\u3002</p> <p>ViT \u200b\u7684\u200b\u4e3b\u4f53\u200b\u7ed3\u6784\u200b\uff1a</p> <p></p> <p>\u200b\u5148\u200b\u89e3\u91ca\u200b Transformer \u200b\u7684\u200b\u57fa\u672c\u539f\u7406\u200b\u3002\u200b\u4e0b\u56fe\u200b\u4e2d\u200b\u7684\u200b\u7f51\u7edc\u7ed3\u6784\u200b\u662f\u200b\u7531\u200b Transformer \u200b\u7f16\u7801\u5668\u200b\u548c\u200b\u89e3\u7801\u5668\u200b\u7ec4\u6210\u200b\u7684\u200b\uff1a</p> <p></p> <p>\u200b\u5176\u4e2d\u200b\u7684\u200b\u7f16\u7801\u5668\u200b\u548c\u200b\u89e3\u7801\u5668\u200b\u8be6\u7ec6\u200b\u7ed3\u6784\u200b\u5982\u4e0b\u200b\uff1a</p> <p></p> <p>\u200b\u8fd9\u200b\u5176\u4e2d\u200b\u6700\u200b\u91cd\u8981\u200b\u7684\u200b\u5c31\u662f\u200b Multi-Head Attention\uff0c\u200b\u8be5\u200b\u7ed3\u6784\u200b\u57fa\u4e8e\u200b\u81ea\u200b\u6ce8\u610f\u529b\u200b\u673a\u5236\u200b\uff0c\u200b\u662f\u200b\u591a\u4e2a\u200b Self-Attention \u200b\u7684\u200b\u5e76\u884c\u200b\u7ec4\u6210\u200b\u3002\u200b\u7406\u89e3\u200b Self-Attention \u200b\u5c31\u200b\u6293\u4f4f\u200b\u4e86\u200b Transformer \u200b\u7684\u200b\u6838\u5fc3\u200b\u3002</p> <p>Self-Attention \u200b\u7684\u200b\u6838\u5fc3\u5185\u5bb9\u200b\u662f\u200b\u4e3a\u200b\u8f93\u5165\u200b\u5411\u91cf\u200b\u7684\u200b\u6bcf\u4e2a\u200b\u5355\u8bcd\u200b\u5b66\u4e60\u200b\u4e00\u4e2a\u200b\u6743\u91cd\u200b\u3002</p>"}]}